# - Example workflow for standalone Black Duck, Coverity, Seeker and SRM
# - Black Duck and Coverity full scans on push to specified branches with upload to SRM
# - Black Duck RAPID and Coverity Comparison scans on pull requests with PR comments enabled
# - Seeker is run if needed on push events to specific branches
#
# Required Environment variables and secrets
# vars.BLACKDUCK_URL
# secrets.BLACKDUCK_API_TOKEN
# vars.COVERITY_URL
# secrets.COV_USER
# secrets.COVERITY_PASSPHRASE
# vars.SEEKER_SERVER_URL
# vars.SEEKER_PROJECT_KEY
# vars.SEEKER_SCAN_REQUIRED
# secrets.SEEKER_API_TOKEN 
# vars.SRM_URL
# vars.SRM_BreakBuild_Policy
# secrets.SRM_APIKEY
# secrets.GITHUB_TOKEN  #  Confirm GITHUB_TOKEN has workflow read & write permissions (GitHub → Project → Settings → Actions → General → Workflow Permissions)
#
# 
#
name: Synopsys Full Product Pipeline
on:
  push:
    branches: [ 6-Production, main, 1-SamShoberWork-PersonalBranch, 2-Feature-Branch, 4-Dev, 5-Testing, 3-Release-Branch ]
  pull_request:
    branches: [ 6-Production, main, 1-SamShoberWork-PersonalBranch ] ## , 2-Feature-Branch, 4-Dev, 5-Testing, 3-Release-Branch  ]
  workflow_dispatch:
jobs:
  test-compose-action:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      checks: write
      contents: write
      deployments: write
      id-token: write
      issues: write
      discussions: write
      packages: write
      repository-projects: write
      security-events: write
      statuses: write

    env:
      SEEKER_SERVER_URL: ${{ vars.SEEKER_SERVER_URL }}
      SEEKER_PROJECT_KEY: ${{ vars.SEEKER_PROJECT_KEY }}
      SEEKER_SCAN_REQUIRED: ${{vars.SEEKER_SCAN_REQUIRED }}
      SRM_BreakBuild_Policy: any
      
    steps:
        - uses: actions/checkout@v2
      
        - name: Set up JDK 11
          uses: actions/setup-java@v2
          with:
            java-version: '11'
            distribution: 'adopt'
      
        - name: Cache Maven packages
          uses: actions/cache@v2
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2

        - name: Build with Maven
          working-directory: ./java-api
          run: mvn -DskipTests=true package

        - name: Release
          uses: djnicholson/release-action@v2.11
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            release-name: 'v2.0'
            tag-name: 'v2.0'
            asset-name: 'api.jar'
            file: 'java-api/target/api.jar'

# This step performs a Black Duck scan on push events
        - name: Black Duck Full Scan
          if: ${{ github.event_name == 'push' }}
          # if: ${{ github.event_name != 'pull_request' }}
          uses: synopsys-sig/synopsys-action@v1.9.0
          env:
            DETECT_PROJECT_NAME: ${{ github.event.repository.name }}
            DETECT_PROJECT_VERSION_NAME: ${{ github.ref_name }}
            DETECT_CODE_LOCATION_NAME: ${{ github.event.repository.name }}-${{ github.ref_name }}
          with:
            blackduck_url: ${{ vars.BLACKDUCK_URL }}
            blackduck_token: ${{ secrets.BLACKDUCK_API_TOKEN }}
            blackduck_scan_full: true
            blackduck_scan_failure_severities: 'BLOCKER'
            # blackduck_fixpr_enabled: true
            # blackduck_reports_sarif_create: true
            # blackduck_upload_sarif_report: true
            # github_token: ${{ secrets.GITHUB_TOKEN }}

# This step performs a Black Duck scan on pull request events
        - name: Black Duck PR Scan
          if: ${{ github.event_name == 'pull_request' }}
          uses: synopsys-sig/synopsys-action@v1.9.0
          env:
            DETECT_PROJECT_NAME: ${{ github.event.repository.name }}
            DETECT_PROJECT_VERSION_NAME: ${{ github.base_ref }}
            DETECT_CODE_LOCATION_NAME: ${{ github.event.repository.name }}-${{ github.base_ref }}
          with:
            blackduck_url: ${{ vars.BLACKDUCK_URL }}
            blackduck_token: ${{ secrets.BLACKDUCK_API_TOKEN }}
            blackduck_scan_full: false
            blackduck_prComment_enabled: true
            # blackduck_fixpr_enabled: true
            blackduck_reports_sarif_create: true
            blackduck_upload_sarif_report: true
            github_token: ${{ secrets.GITHUB_TOKEN }}
        
# This step performs a full Coverity scan on push events
        - name: Coverity Full Scan
          if: ${{ github.event_name == 'push' }}
          # if: ${{ github.event_name != 'pull_request' }}
          uses: synopsys-sig/synopsys-action@v1.9.0
          with:
            coverity_url: ${{ vars.COVERITY_URL }}
            coverity_user: ${{ secrets.COV_USER }}
            coverity_passphrase: ${{ secrets.COVERITY_PASSPHRASE }}
            coverity_project_name: ${{ github.event.repository.name }}
            coverity_stream_name: ${{ github.event.repository.name }}-${{ github.ref_name }}
            # coverity_policy_view: 'Outstanding Issues'

# This step performs a Coverity scan on pull request events
        - name: Coverity PR Scan
          if: ${{ github.event_name == 'pull_request' }}
          uses: synopsys-sig/synopsys-action@v1.9.0
          with:
            coverity_url: ${{ vars.COVERITY_URL }}
            coverity_user: ${{ secrets.COV_USER }}
            coverity_passphrase: ${{ secrets.COVERITY_PASSPHRASE }}
            coverity_project_name: ${{ github.event.repository.name }}
            coverity_stream_name: ${{ github.event.repository.name }}-${{ github.base_ref }}
            coverity_prComment_enabled: true
            github_token: ${{ secrets.GITHUB_TOKEN }}

# Will kick off an analysis job in SRM to sync the latest scan results            
        - name: SRM Upload
          if: ${{ github.event_name == 'push' }}
          # if: ${{ github.event_name != 'pull_request' }}
          uses: 'codedx/codedx-github-action@v1.2.0'
          with:
            server-url: ${{ vars.SRM_URL }}/srm
            api-key: ${{ secrets.SRM_APIKEY }}
            # ER CDX-1693 support project-name
            project-name: ${{ github.event.repository.name }}
            # project-id: "4;branch=${{ github.ref_name }}"  
            # ER CDX-1666 support branch-name
            base-branch-name: ${{ github.event.repository.default_branch }}
            target-branch-name: ${{ github.ref_name }}              
            #source-and-binaries-glob: './**'      # commenting it out to test a different SRM server. This may not be correct. 
            wait-for-completion: true
            
#        - name: Save Logs
#          if: always()
#          uses: actions/upload-artifact@v4
#          with:
#            name: bridge-logs
#            path: ${{ github.workspace }}/.bridge

# Check to see if Seeker needs to be run for this project using an GitHub environment Variable
        - name: Check whether Seeker is enabled
          id: seeker-check
          shell: bash
          run: |
            if [ "${{ vars.SEEKER_SCAN_REQUIRED }}" == 'true' ]; then
              echo "enabled=true" >> $GITHUB_OUTPUT;
            else
              echo "enabled=false" >> $GITHUB_OUTPUT;
              fi

# Use Seeker API to download an agent for a Java Application and a speicfic Project Key
        - name: Add Seeker Agent
          run: |
            sh -c "$( curl -k -X GET -fsSL --header 'Accept: application/x-sh' 'https://testing.seeker.synopsys.com/rest/api/latest/installers/agents/scripts/JAVA?osFamily=LINUX&downloadWith=curl&projectKey='$SEEKER_PROJECT_KEY'&webServer=OTHER&flavor=DEFAULT&agentName=&accessToken=')"
            echo "JAVA_TOOL_OPTIONS=-javaagent:./seeker/seeker-agent.jar" >> $GITHUB_ENV
            
# Add Seeker Java Options
        - name: Add Java agent
          if: ${{ steps.seeker-check.outputs.enabled == 'true' }}
          shell: bash
          run: |
            echo "JAVA_TOOL_OPTIONS=-javaagent:`pwd`/seeker/seeker-agent.jar" >> $GITHUB_ENV

        - name: Start HippoTech App for Testing
          working-directory: ./java-api
          run: ./start.sh

        - name: Run Automated Acceptance Tests
          working-directory: ./jest
          run: npm install && npm test

        - name: Shut Down HippoTech App
          working-directory: ./java-api
          run: ./stop.sh

# View Vulns in the workflow output where severity = High          
        - name: Generate Seeker Reports
          run: |
            curl -s -X 'GET' \
            $SEEKER_SERVER_URL'/rest/api/latest/vulnerabilities?format=JSON&language=en&projectKeys='$SEEKER_PROJECT_KEY'&statuses=DETECTED&minSeverity=HIGH' \
              -H 'accept: text/plain' \
              -H "Authorization: ${{ secrets.SEEKER_API_TOKEN }}" \
              -H 'RequestSource: swagger' | jq 'map(.ItemKey + .VulnerabilityName + " URL: " + .SeekerServerLink)'

# Checks to see if there are any compliance issues with the Seeker run
        - name: Seeker Compliance Check
          run: |
            COMPLIANCE=`curl -s -X 'GET' \
              $SEEKER_SERVER_URL'/rest/api/latest/projects/'$SEEKER_PROJECT_KEY'/status' \
              -H 'accept: application/json' \
              -H "Authorization: ${{ secrets.SEEKER_API_TOKEN }}" \
              -H 'RequestSource: swagger'` | jq '.projectStatus.compliant'
            if [ "$COMPLIANCE" = "true" ]; then
              echo "Seeker Compliance Check Passed"
            else
              if [ "$SEEKER_COMPLIANCE_FAIL_BUILD" = "true" ]; then
                echo "::error ::Seeker compliance check failed." && exit 1
              else
                echo "::warning ::Seeker compliance check failed."
              fi
            fi
        - name: Publish Test Report
          uses: mikepenz/action-junit-report@v2
          with:
            report_paths: '**/results/*.xml'
            check_name: "test"

# Kicks off an analysis for the project to sync results into SRM
        - name: SRM Upload
          if: ${{ github.event_name == 'push' }}
          # if: ${{ github.event_name != 'pull_request' }}
          uses: 'codedx/codedx-github-action@v1.2.0'
          with:
            server-url: ${{ vars.SRM_URL }}/srm
            api-key: ${{ secrets.SRM_APIKEY }}
            # ER CDX-1693 support project-name
            project-name: ${{ github.event.repository.name }}
            # project-id: "4;branch=${{ github.ref_name }}"  
            # ER CDX-1666 support branch-name
            base-branch-name: ${{ github.event.repository.default_branch }}
            target-branch-name: ${{ github.ref_name }}              
            #source-and-binaries-glob: './**'      # commenting it out to test a different SRM server. This may not be correct. 
            wait-for-completion: true

# Checks for SRM Project ID and sets env variable
        - name: Get SRM Project ID
          id: get_srm_project_id
          run: |
            SRM_Project_ID=$(curl -s -X 'POST' \
            'https://testing.srm.synopsys.com/srm/api/projects/query' \
              -H 'accept: */*' \
              -H "API-Key: ${{ secrets.SRM_APIKEY }}" \
              -H 'Content-Type: */*' \
              -d '{
              "filter": {
                "name": "${{ github.event.repository.name }}" 
                }
            }' | jq -r '.[0].id')
            echo "SRM_Project_ID=$SRM_Project_ID" >> $GITHUB_ENV
            echo $SRM_Project_ID

# Check to see if we need to fail the build based off Seeker Compliance
        - name: SRM Compliance Check
          run: |
            COMPLIANCE=$(curl -s -X 'GET' \
            'https://testing.srm.synopsys.com/srm/x/projects/${{ env.SRM_Project_ID }};branch=${{ github.ref_name }}/policies/${{ env.SRM_BreakBuild_Policy }}/build-broken' \
              -H 'accept: application/json' \
              -H "API-Key: ${{ secrets.SRM_APIKEY }}")
            if [ "$COMPLIANCE" = "false" ]; then
              echo "SRM Compliance Check Passed"
            else
              if [ "$SRM_COMPLIANCE_FAIL_BUILD" = "true" ]; then
                echo "::error ::SRM compliance check failed." && exit 1
              else
                echo "::warning ::SRM compliance check failed."
              fi
            fi

#        - name: Save Logs
#          if: always()
#          uses: actions/upload-artifact@v4
#          with:
#            name: bridge-logs
#            path: ${{ github.workspace }}/.bridge
